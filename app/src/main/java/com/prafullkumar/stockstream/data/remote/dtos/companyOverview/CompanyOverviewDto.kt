package com.prafullkumar.stockstream.data.remote.dtos.companyOverview
import com.google.gson.annotations.SerializedName
import com.prafullkumar.stockstream.domain.models.companyOverview.CompanyOverview

data class CompanyOverviewDto(
    @SerializedName("200DayMovingAverage") val `200DayMovingAverage`: String?,
    @SerializedName("50DayMovingAverage") val `50DayMovingAverage`: String?,
    @SerializedName("52WeekHigh") val `52WeekHigh`: String?,
    @SerializedName("52WeekLow") val `52WeekLow`: String?,
    @SerializedName("Address") val Address: String?,
    @SerializedName("AnalystRatingBuy") val AnalystRatingBuy: String?,
    @SerializedName("AnalystRatingHold") val AnalystRatingHold: String?,
    @SerializedName("AnalystRatingSell") val AnalystRatingSell: String?,
    @SerializedName("AnalystRatingStrongBuy") val AnalystRatingStrongBuy: String?,
    @SerializedName("AnalystRatingStrongSell") val AnalystRatingStrongSell: String?,
    @SerializedName("AnalystTargetPrice") val AnalystTargetPrice: String?,
    @SerializedName("AssetType") val AssetType: String?,
    @SerializedName("Beta") val Beta: String?,
    @SerializedName("BookValue") val BookValue: String?,
    @SerializedName("CIK") val CIK: String?,
    @SerializedName("Country") val Country: String?,
    @SerializedName("Currency") val Currency: String?,
    @SerializedName("Description") val Description: String?,
    @SerializedName("DilutedEPSTTM") val DilutedEPSTTM: String?,
    @SerializedName("DividendDate") val DividendDate: String?,
    @SerializedName("DividendPerShare") val DividendPerShare: String?,
    @SerializedName("DividendYield") val DividendYield: String?,
    @SerializedName("EBITDA") val EBITDA: String?,
    @SerializedName("EPS") val EPS: String?,
    @SerializedName("EVToEBITDA") val EVToEBITDA: String?,
    @SerializedName("EVToRevenue") val EVToRevenue: String?,
    @SerializedName("ExDividendDate") val ExDividendDate: String?,
    @SerializedName("Exchange") val Exchange: String?,
    @SerializedName("FiscalYearEnd") val FiscalYearEnd: String?,
    @SerializedName("ForwardPE") val ForwardPE: String?,
    @SerializedName("GrossProfitTTM") val GrossProfitTTM: String?,
    @SerializedName("Industry") val Industry: String?,
    @SerializedName("LatestQuarter") val LatestQuarter: String?,
    @SerializedName("MarketCapitalization") val MarketCapitalization: String?,
    @SerializedName("Name") val Name: String?,
    @SerializedName("OfficialSite") val OfficialSite: String?,
    @SerializedName("OperatingMarginTTM") val OperatingMarginTTM: String?,
    @SerializedName("PEGRatio") val PEGRatio: String?,
    @SerializedName("PERatio") val PERatio: String?,
    @SerializedName("PriceToBookRatio") val PriceToBookRatio: String?,
    @SerializedName("PriceToSalesRatioTTM") val PriceToSalesRatioTTM: String?,
    @SerializedName("ProfitMargin") val ProfitMargin: String?,
    @SerializedName("QuarterlyEarningsGrowthYOY") val QuarterlyEarningsGrowthYOY: String?,
    @SerializedName("QuarterlyRevenueGrowthYOY") val QuarterlyRevenueGrowthYOY: String?,
    @SerializedName("ReturnOnAssetsTTM") val ReturnOnAssetsTTM: String?,
    @SerializedName("ReturnOnEquityTTM") val ReturnOnEquityTTM: String?,
    @SerializedName("RevenuePerShareTTM") val RevenuePerShareTTM: String?,
    @SerializedName("RevenueTTM") val RevenueTTM: String?,
    @SerializedName("Sector") val Sector: String?,
    @SerializedName("SharesOutstanding") val SharesOutstanding: String?,
    @SerializedName("Symbol") val Symbol: String?,
    @SerializedName("TrailingPE") val TrailingPE: String?
) {
    fun toCompanyOverView(): CompanyOverview {
        return CompanyOverview(
            `200DayMovingAverage` = `200DayMovingAverage`,
            `50DayMovingAverage` = `50DayMovingAverage`,
            `52WeekHigh` = `52WeekHigh`,
            `52WeekLow` = `52WeekLow`,
            Address = Address,
            AnalystRatingBuy = AnalystRatingBuy,
            AnalystRatingHold = AnalystRatingHold,
            AnalystRatingSell = AnalystRatingSell,
            AnalystRatingStrongBuy = AnalystRatingStrongBuy,
            AnalystRatingStrongSell = AnalystRatingStrongSell,
            AnalystTargetPrice = AnalystTargetPrice,
            AssetType = AssetType,
            Beta = Beta,
            BookValue = BookValue,
            CIK = CIK,
            Country = Country,
            Currency = Currency,
            Description = Description,
            DilutedEPSTTM = DilutedEPSTTM,
            DividendDate = DividendDate,
            DividendPerShare = DividendPerShare,
            DividendYield = DividendYield,
            EBITDA = EBITDA,
            EPS = EPS,
            EVToEBITDA = EVToEBITDA,
            EVToRevenue = EVToRevenue,
            ExDividendDate = ExDividendDate,
            Exchange = Exchange,
            FiscalYearEnd = FiscalYearEnd,
            ForwardPE = ForwardPE,
            GrossProfitTTM = GrossProfitTTM,
            Industry = Industry,
            LatestQuarter = LatestQuarter,
            MarketCapitalization = MarketCapitalization,
            Name = Name ?: "",
            OfficialSite = OfficialSite ?: "",
            OperatingMarginTTM = OperatingMarginTTM,
            PEGRatio = PEGRatio,
            PERatio = PERatio,
            PriceToBookRatio = PriceToBookRatio,
            PriceToSalesRatioTTM = PriceToSalesRatioTTM,
            ProfitMargin = ProfitMargin,
            QuarterlyEarningsGrowthYOY = QuarterlyEarningsGrowthYOY ?: "0",
            QuarterlyRevenueGrowthYOY = QuarterlyRevenueGrowthYOY ?: "0",
            ReturnOnAssetsTTM = ReturnOnAssetsTTM ?: "0",
            ReturnOnEquityTTM = ReturnOnEquityTTM ?: "0",
            RevenuePerShareTTM = RevenuePerShareTTM ?: "0",
            RevenueTTM = RevenueTTM ?: "0",
            Sector = Sector ?: "",
            SharesOutstanding = SharesOutstanding ?: "0",
            Symbol = Symbol ?: "",
            TrailingPE = TrailingPE ?: "0"
        )
    }
}